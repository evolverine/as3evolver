<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
	creationComplete="init()"
	implements="it.aekidna.cleverplatypus.utils.IAutowirable"
	horizontalAlign="left"
	horizontalGap="0">
	<mx:Script>
		<![CDATA[
			/**
			 * <p>
			 * The Breadcrumbs component is responsible for adding a visual representation to the breadcrumb data managed by the
			 * <code>BreadcrumbsController</code>. It listens to change events sent by the controller and updates its state
			 * accordingly. Also, it records click events and uses the controller to select a breadcrumb.
			 * </p>
			 * 
			 * <p>
			 * The Breadcrumbs component is built so that changing the appearance of breadcrumbs is as easy as possible. The
			 * <code>breadcrumbRenderer</code> property acts similarly to a List's itemRenderer property. Implementing a
			 * project-specific item renderer is simply a matter of assigning an implementor of IDataRenderer to this property.
			 * The default item renderer for breadcrumbs is <code>BreadcrumbItem</code>. The <code>BreadcrumbItem</code> contains
			 * the visual representation of a breadcrumb item, and is used by <code>BreadcrumbStep</code> in conjunction with an
			 * instance of a separator.
			 * </p>
			 * 
			 * 
			 * <p>
			 * For developers:
			 * - there is the concept of a breadcrumbs separator (eg '|' or '>'). The ability to change this has not yet been implemented,
			 * but there is some code which needs amending, and can be done similarly to the way the breadcrumb renderer functionality has been
			 * implemented.
			 * 
			 * - This class has been designed to run as efficiently as possible, and to save resources. The breadcrumb steps themselves are
			 * managed by an object pool ( see com.as3evolver.factory.GenericObjectPool ). This object pool needs to be injected via the
			 * <code>stepsPool</code> property or assigned directly. The class given as an argument to the <code>GenericObjectPool</code>
			 * constructor needs to be <code>BreadcrumbStep</code> or a subclass of <code>BreadcrumbStep</code>.
			 * </p>
			 * 
			 * 
			 * <p>
			 * <b>To implement this component in your project:</b>
			 * - There is no direct implementation of the controller in code, as there is an expectation that an implementing project will use Spring for
			 * Actionscript to inject this dependency into the view, using the <code>breadcrumbsController</code> setter on the Breadcrumbs mxml component.
			 * Alternatively one could merely instantiate this class in a project-specific subclass of Breadcrumbs:
			 * <code>this.breadcrumbsController = new BreadcrumbsController();</code>
			 * - There is no direct implementation of the event dispatcher delegate in the code, as there is an expectation that an implementing project
			 * will use Spring for Actionscript to inject this dependency into the BreadcrumbsController via the <code>eventDispatcherDelegate</code> property.
			 * Alternatively an implementing project can simply assign an implementer of the <code>IEventDispatcherDelegate</code> interface (either
			 * an instance of <code>DefaultEventDispatcherDelegate</code>, or of a custom delegate ).
			 * - The controller is ideally accessed via a subclass of the Breadcrumbs mxml component via the <code>controller</code> getter.
			 * </p>
			 * 
			 * The BreadcrumbsController can also be subclassed in the implementing project for any custom functionality it needs to perform.
			 * 
			 * @see com.as3evolver.factory.GenericObjectPool
			 * @see com.pearson.shingo.view.components.flex3.breadcrumbs.BreadcrumbStep
			 * @see com.pearson.shingo.view.components.flex3.breadcrumbs.BreadcrumbItem
			 * @see com.pearson.shingo.view.components.flex3.breadcrumbs.DefaultEventDispatcherDelegate
			 * 
			 * @author Mihai Chira
			 * */
			public function readClassDescription() : void
			 {
			 	/**
			 	 * this function doesn't do anything other than allow the description of the class (above)
			 	 * to be included in the asdoc output. Without a function or variable, mxml comments do not get
			 	 * included in the documentation.
			 	 * */
			 }
			
			import com.as3evolver.factory.PoolOfPools;
			import com.as3evolver.factory.GenericObjectPool;
			import mx.events.PropertyChangeEvent;
			import mx.binding.utils.ChangeWatcher;
			import mx.binding.utils.BindingUtils;
			import mx.core.IDataRenderer;
			import mx.controls.Button;
			import mx.controls.Label;
			import mx.core.UIComponent;
			
			[Autowired(byName="breadcrumbStepsPool")]
			public var stepsPool:GenericObjectPool;
			
			protected var _controller:BreadcrumbsController;
			
			/**
			 * If there are fewer or as many breadcrumb steps than the value of this property,
			 * the entire component will be made invisible (<code>this.visible = false;</code>).
			 * */
			[Bindable]
			public var showOnlyIfMoreThan:Number = 1;
			
			private var _separatorComponentClass:Class = Label;
			private var _separators:Array = []; //of UIComponents
			
			private var _separatorString:String = '>';
			
			private var _breadcrumbRenderer:Class = BreadcrumbStep;
			
			/**
			 * holds all the breadcrumb steps (instances of  <code>breadcrumbRenderer</code>)
			 * */
			protected var _breadcrumbs:Array = [];
			
			
			[Autowired(byName="breadcrumbsController")]
			public function set breadcrumbsController(val : BreadcrumbsController):void
			{
				if(val && (this._controller != val)) {
					if(this._controller)
						this._controller.removeEventListener(Event.CHANGE, this.itemsChanged);
					
					this._controller = val;
					this._controller.addEventListener(Event.CHANGE, this.itemsChanged);
				}
			}
			
			public function get controller():BreadcrumbsController
			{
				return this._controller;
			}
			
			
			private function init():void
			{
				BreadcrumbStep.separatorString = _separatorString;
			}
			
			
			/**
			 * Setting the data property overrides the controller's management of
			 * the breadcrumbs.
			 * */
			public override function set data(value:Object):void
			{
				if((value is Array) && (this.data != value)) {
					super.data = value;
					this._controller.items = value as Array;
				}
			}
			
			
			/**
			 * NOT CURRENTLY WORKING. TO BE FINALIZED<br/><br/>
			 * 
			 * Used to change the separator string.
			 * */
			public function set separatorString(val:String):void
			{
				if(this._separatorString != val) {
					this._separatorString = val;
					this.separatorRenderer = Label;
				}
			}
			
			/**
			 * NOT CURRENTLY WORKING. TO BE FINALIZED<br/><br/>
			 * 
			 * Used to change the separator item renderer.
			 * */
			public function set separatorRenderer(val:Class):void
			{
				if(this._separatorComponentClass != val) {
					//do the same as at set breadcrumbRenderer
				}
			}
			
			
			/**
			 * <p>
			 * Used to change the breadcrumb renderer. The <code>BreadcrumbStep</code>
			 * class has a public static setter called <code>breadcrumbRenderer</code>,
			 * which it uses to manage the item renderer for the visual breadcrumb instances.
			 * </p>
			 * 
			 * <p>
			 * The value assigned to this property needs to be a Class which implements
			 * <code>IDataRenderer</code> and extends <code>UIComponent</code>. 
			 * </p>
			 * */
			public function set breadcrumbRenderer(val:Class):void
			{
				if(BreadcrumbStep.breadcrumbRenderer != val) {
					BreadcrumbStep.breadcrumbRenderer = val;
					
					//go through the breadcrumb 'steps' and change their renderer
					var step:BreadcrumbStep;
					for each(step in this._breadcrumbs)
						step.updateRenderer();
				}
			}
			
			
			
			/**
			 * Refreshes the visual representation of the breadcrumb information held by the controller.
			 * 
			 * This function tries to reuse current components as much as possible. Instead of clearing the
			 * view objects and recreating them each time, it goes through each breadcrumb, checks its name against
			 * the breadcrumb data, 'parks' superflous ones ( see com.as3evolver.factory.GenericObjectPool )
			 * and requests the creation of extra items if needed.
			 * 
			 * @see com.as3evolver.factory.GenericObjectPool 
			 * */
			public function refreshCrumbs():void
			{
				var breadCrumbData:Array = this._controller.items;
				if(!breadCrumbData || breadCrumbData.length <= this.showOnlyIfMoreThan) {
					this.visible = false;
					return;
				}
				else
					this.visible = true;
				
				var step:IDataRenderer;
				var stepComponent:UIComponent;
				var stepCanBeLast:ICanBeLast;
				var needsToExist:Boolean;
				var existingValue:IBreadcrumb;
				var deleteFrom:Number;
				var isLast:Boolean;
				var max:Number = Math.max(this._breadcrumbs.length, breadCrumbData.length);
				var i:Number = -1;
				while(++i < max) {
					
					needsToExist = breadCrumbData.length > i;
					existingValue = breadCrumbData[i] as IBreadcrumb;
					isLast = i == (breadCrumbData.length-1);
					
					step = this._breadcrumbs[i] as IDataRenderer;
					if(step) {
						stepCanBeLast = step as ICanBeLast;
						stepComponent = step as UIComponent;
					}
					
					if(needsToExist) {
						if(step) {
							step.data = existingValue;
							stepCanBeLast.isLast = isLast;
						}
						else
							this.addStep(existingValue, isLast);
					}
					else {
						//delete from here on if breadcrumbs still exist
						if(step) {
							if(!(deleteFrom >= 0))
								deleteFrom = i;
							if(stepComponent.parent)
								stepComponent.parent.removeChild(stepComponent);
						}
					}
				}
				
				if(deleteFrom >= 0) {
					this.clearItemsFromIndex(deleteFrom);
					this._controller.clearItemsFromIndex(deleteFrom);
				}
			}
			
			
			/**
			 * Uses the <code>stepsPool</code> to add a new breadcrumb step (which is an instance of
			 * <code>breadcrumbRenderer</code>) to the list
			 * 
			 * @param data the data passed to the newly created instance of <code>breadcrumbRenderer</code> 
			 * @param isLast true if the breadcrumb step is the last in the list. Used, among others, to hide
			 * the separator and possibly to disable the component for clicking. 
			 * */
			protected function addStep(data:IBreadcrumb, isLast:Boolean = false):void
			{
				var step:IDataRenderer = stepsPool.gimme() as IDataRenderer;
				var stepComponent:UIComponent;
				var stepCanBeLast:ICanBeLast;
				
				if(step) {
					step.data = data;
					this._breadcrumbs.push(step);
					
					stepCanBeLast = step as ICanBeLast;
					stepCanBeLast.isLast = isLast;
					
					stepComponent = step as UIComponent;
					stepComponent.addEventListener(Event.SELECT, this.selectItem);
					
					this.addChild(stepComponent);
				}
			}
			
			
			/**
			 * Clears the breadcrumb steps starting with a specific index in the array.
			 * Clearing means removing them from the array and parking them in the object
			 * pool. The removal from the stage should be done in the calling function.
			 * 
			 * @param val the index to start clearing breadcrumb steps from (the item on
			 * that position will be cleared as well). Needs to be >= 0 and smaller
			 * than the length of the <code>_breadcrumbs</code> array.
			 * */
			protected function clearItemsFromIndex(val:Number):void
			{
				if(val >= 0 && val < this._breadcrumbs.length) {
					while(this._breadcrumbs.length > val)
						this.stepsPool.park(this._breadcrumbs.pop());
				}
			}
			
			
			
			private function itemsChanged(event:Event):void
			{
				this.refreshCrumbs();
			}
			
			
			private function selectItem(event:Event):void
			{
				var item:BreadcrumbStep = event.currentTarget as BreadcrumbStep;
				if(item)
					this._controller.select(item.data as BreadcrumbData);
			}
			
			
			
		]]>
	</mx:Script>
	
	
	
</mx:HBox>
